---
title: Benchmark Matrix Operations
date: 2024-01-09
date-modified: last-modified
categories:
  - benchmark
execute:
  warning: false
---

Recently, I am trying to speed up my connectome predictive modeling code. I found that the matrix operations are the bottleneck. Specifically, I need a faster version of `scale()`. Based on [this blog](https://hopstat.wordpress.com/2016/02/23/a-faster-scale-function/), I decided to benchmark the matrix operations in different packages from [fastverse](https://fastverse.github.io/fastverse/).

```{r}
#| cache: false

library(collapse)
requireNamespace("bench")
```

# Row Means

```{r}
#| label: bench-rowMeans

withr::local_seed(1)
bench <- bench::press(
  nrow = c(10, 100, 1000),
  ncol = c(100, 1000, 10000),
  {
    data <- matrix(rnorm(nrow * ncol), nrow = nrow)
    bench::mark(
      collapse = collapse::fmean(data),
      Rfast = Rfast::colmeans(data),
      matrixStats = matrixStats::colMeans2(data),
      base = .colMeans(data, nrow, ncol)
    )
  }
)
```

```{r}
#| label: fig-rowmeans
#| column: page
#| fig-cap: Benchmark of row means
#| fig-width: 8
#| fig-height: 5
#| dependson: bench-rowMeans

plot(bench)
```

# Row SDs

```{r}
#| label: bench-rowSds

withr::local_seed(1)
bench <- bench::press(
  nrow = c(10, 100, 1000),
  ncol = c(100, 1000, 10000),
  {
    data <- matrix(rnorm(nrow * ncol), nrow = nrow)
    bench::mark(
      collapse = collapse::fsd(data),
      Rfast = Rfast::colVars(data, std = TRUE),
      matrixStats = matrixStats::colSds(data)
    )
  }
)
```

```{r}
#| label: fig-rowsds
#| column: page
#| fig-cap: Benchmark of row SDs
#| fig-width: 8
#| fig-height: 5
#| dependson: bench-rowSds

plot(bench)
```

# Row-wise Operations

Unfortunately, based on [this issue](https://github.com/HenrikBengtsson/matrixStats/issues/238), rowwise computations are not easy to be speeded in matrixStats. So further benchmarking will drop it.

```{r}
#| label: bench-rowwise

withr::local_seed(1)
bench <- bench::press(
  nrow = c(10, 100, 1000),
  ncol = c(100, 1000, 10000),
  {
    data <- matrix(rnorm(nrow * ncol), nrow = nrow)
    vec <- rnorm(ncol)
    bench::mark(
      collapse = data %r-% vec,
      Rfast = Rfast::eachrow(data, vec, "-"),
      base = data - rep(vec, each = nrow)
    )
  }
)
```

```{r}
#| label: fig-rowwise
#| column: page
#| fig-cap: Benchmark of row-wise operations
#| fig-width: 8
#| fig-height: 5
#| dependson: bench-rowwise

plot(bench)
```

# Scale

```{r}
#| label: bench-scale

fscale_rfast <- function(x) {
  means <- Rfast::colmeans(x)
  sds <- Rfast::colVars(x, std = TRUE)
  Rfast::eachrow(
    Rfast::eachrow(x, means, "-"),
    sds, "/"
  )
}
withr::local_seed(1)
bench <- bench::press(
  nrow = c(10, 100, 1000),
  ncol = c(100, 1000, 10000),
  {
    data <- matrix(rnorm(nrow * ncol), nrow = nrow)
    bench::mark(
      collapse = fscale(data),
      Rfast = fscale_rfast(data),
      base = scale(data),
      check = FALSE # base scale will add attributes
    )
  }
)
```

```{r}
#| label: fig-scale
#| column: page
#| fig-cap: Benchmark of scale
#| fig-width: 8
#| fig-height: 5
#| dependson: bench-scale

plot(bench)
```

# Conclusion

From the above figures, we will find Rfast is the fastest package for matrix operations. Previously, I have used collapse package, which is actually fast enough. But now I will switch to Rfast.
