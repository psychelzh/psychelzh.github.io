{
  "hash": "d489a3435a55832814b85f0f07c289c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R metaprogramming\"\ndate: 2024-03-19\ndate-modified: last-modified\ncategories:\n  - R-programming\n---\n\n\nSince I have learnt about the rlang package, I have been fascinated by the power of metaprogramming in R. The first time I know such a programming pattern might date back to when I knew the [`eval()`](https://ww2.mathworks.cn/help/matlab/ref/eval.html) function in writing MATLAB codes. However, this type of programming is really a disaster in MATLAB, for it only accepts a string of code. It is R shows me the interesting part of the world of metaprogramming.\n\nAt that time, I knew it is called non-standard evaluation (NSE) in R, and it is just used to save typing so that users do not need to type quotes, and what's more useful, I can access the data columns without typing the data variable names. Then after reading advanced R, it reveals a new path about metaprogramming in R, although some strange terms also make me confused, e.g., quasiquotation, unquotation, and so on.\n\nWhat makes me really write codes with metaprogramming paradigm is when I began to use targets package. And one day, I found \"static branching\" supported by the package, which requires certain metaprogramming. And the author of that package also created targetopia, really requiring some metaprogramming skills to create so-called targets factory functions. So I then resorted to rlang package, trying to have a deeper understanding of metaprogramming in R.\n\nThe first days with rlang package were really happy and funny. But the first frustration came when I found `expr()` is really annoying becasue I treated it as equivalent of `substitute()`, only also supports `!!` and `!!!` injection. After a real long time, I finally knew it is equivalent to `bquote()`. At the end of the day, I just begin to love base R, especially for metaprogramming. For example, `bquote()` and `substitute()` are more intuitive to me.\n\nBut today I got to know that `bquote()` is more power than I thought. It also supports splicing!! Amazing, although only added after R 4.0.0. I write a simple use case for me, which is really special for usage in targets package. As I sometimes nested name for several targets into a list, and I want to make sure targets understand that the dependency is the elements of the list, not the list itself. So the splicing feature of `bquote()` is really useful for me. Here is a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_dir({\n  targets::tar_script({\n    library(targets)\n    deps <- rlang::syms(c(\"x\", \"y\"))\n    list(\n      tar_target(x, 1),\n      tar_target(y, 2),\n      eval(\n        bquote(\n          tar_target(\n            name,\n            list(..(deps)) # splice syntax\n          ),\n          splice = TRUE\n        )\n      )\n    )\n  })\n  targets::tar_visnetwork()\n})\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-854fabc30f81ff2b3f80\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-854fabc30f81ff2b3f80\">{\"x\":{\"nodes\":{\"name\":[\"name\",\"x\",\"y\",\"deps\"],\"type\":[\"stem\",\"stem\",\"stem\",\"object\"],\"description\":[null,null,null,null],\"status\":[\"outdated\",\"outdated\",\"outdated\",\"outdated\"],\"seconds\":[null,null,null,null],\"bytes\":[null,null,null,null],\"branches\":[null,null,null,null],\"label\":[\"name\",\"x\",\"y\",\"deps\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\"],\"id\":[\"name\",\"x\",\"y\",\"deps\"],\"level\":[2,1,1,0],\"shape\":[\"dot\",\"dot\",\"dot\",\"triangleDown\"]},\"edges\":{\"from\":[\"x\",\"y\"],\"to\":[\"name\",\"name\"],\"arrows\":[\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Outdated\",\"Stem\",\"Object\"],\"color\":[\"#78B7C5\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"triangleDown\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}