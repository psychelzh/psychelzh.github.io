[
  {
    "objectID": "posts/2024-01-09-bench-matrix-stats/index.html",
    "href": "posts/2024-01-09-bench-matrix-stats/index.html",
    "title": "Benchmark Matrix Operations",
    "section": "",
    "text": "Recently, I am trying to speed up my connectome predictive modeling code. I found that the matrix operations are the bottleneck. Specifically, I need a faster version of scale(). Based on [this blog](A Faster Scale Function | A HopStat and Jump Away (wordpress.com), I decided to benchmark the matrix operations in different packages from fastverse.\n\nlibrary(collapse)\nrequireNamespace(\"bench\")\n\n\nRow Means\n\nbench &lt;- bench::press(\n  nrow = c(10, 100, 1000),\n  ncol = c(100, 1000, 10000),\n  {\n    data &lt;- matrix(rnorm(nrow * ncol), nrow = nrow)\n    bench::mark(\n      collapse = collapse::fmean(data),\n      Rfast = Rfast::colmeans(data),\n      matrixStats = matrixStats::colMeans2(data),\n      base = .colMeans(data, nrow, ncol)\n    )\n  }\n)\n\n\nplot(bench)\n\n\n\n\nFigure 1: Benchmark of row means\n\n\n\n\n\n\nRow SDs\n\nbench &lt;- bench::press(\n  nrow = c(10, 100, 1000),\n  ncol = c(100, 1000, 10000),\n  {\n    data &lt;- matrix(rnorm(nrow * ncol), nrow = nrow)\n    bench::mark(\n      collapse = collapse::fsd(data),\n      Rfast = Rfast::colVars(data, std = TRUE),\n      matrixStats = matrixStats::colSds(data)\n    )\n  }\n)\n\n\nplot(bench)\n\n\n\n\nFigure 2: Benchmark of row SDs\n\n\n\n\n\n\nRow-wise Operations\nUnfortunately, based on this issue, rowwise computations are not easy to be speeded in matrixStats. So further benchmarking will drop it.\n\nbench &lt;- bench::press(\n  nrow = c(10, 100, 1000),\n  ncol = c(100, 1000, 10000),\n  {\n    data &lt;- matrix(rnorm(nrow * ncol), nrow = nrow)\n    vec &lt;- rnorm(ncol)\n    bench::mark(\n      collapse = data %r-% vec,\n      Rfast = Rfast::eachrow(data, vec, \"-\"),\n      base = data - rep(vec, each = nrow)\n    )\n  }\n)\n\n\nplot(bench)\n\n\n\n\nFigure 3: Benchmark of row-wise operations\n\n\n\n\n\n\nScale\n\nfscale_rfast &lt;- function(x) {\n  means &lt;- Rfast::colmeans(x)\n  sds &lt;- Rfast::colVars(x, std = TRUE)\n  Rfast::eachrow(\n    Rfast::eachrow(x, means, \"-\"),\n    sds, \"/\"\n  )\n}\nbench &lt;- bench::press(\n  nrow = c(10, 100, 1000),\n  ncol = c(100, 1000, 10000),\n  {\n    data &lt;- matrix(rnorm(nrow * ncol), nrow = nrow)\n    bench::mark(\n      collapse = fscale(data),\n      Rfast = fscale_rfast(data)\n    )\n  }\n)\n\n\nplot(bench)\n\n\n\n\nFigure 4: Benchmark of scale\n\n\n\n\n\n\nConclusion\nFrom the above figures, we will find Rfast is the fastest package for matrix operations. Previously, I have used collapse package, which is actually fast enough. But now I will switch to Rfast."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello, I am Liang, Zhang, Ph.D candidate in Beijing Normal University. This is my personal blog for my everyday thoughts and coding discovery."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Liang’s Blogs",
    "section": "",
    "text": "Benchmark Matrix Operations\n\n\n\n\n\n\n\nbenchmark\n\n\ncoding\n\n\n\n\n\n\n\n\n\n\n\nJan 9, 2024\n\n\n\n\n\n\nNo matching items"
  }
]